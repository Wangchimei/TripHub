<div class="card devise-box">
  <div class="card-body mx-2 my-4">
    <div id="chartdiv"></div>

  
  
  <%= form_with(model: @trip) do |f| %>
  <div>
    <p>Destination:
      <%= @trip.destination_countries.first.name %>
      <%= @trip.destination_states.first.name if @trip.destination_states.first  %>
      <%= @trip.destination_cities.first.name if @trip.destination_cities.first %>
    </p>
  </div>

  <div>
    <%= f.label :name %>
    <%= f.text_field :name %>
  </div>
  <div>
    <%= f.label :description %>
    <%= f.text_field :description %>
  </div>
  <div>
    <%= f.label :date_range %>
    <%= f.text_field :date_range, value: date_default, id:"date-range-picker" %>
  </div>
  <div>
    <%= f.hidden_field :start_day, value: @trip.start_day.strftime("%Y-%m-%d"), class:"start_hidden" %>
    <%= f.hidden_field :end_day, value: @trip.end_day.strftime("%Y-%m-%d"), class:"end_hidden" %>
  </div>

  <div>
    <%= f.submit %>
    <%= link_to 'Back', user_path(current_user) %>
  </div>
<% end %>


<div class="card devise-box">
  <div class="card-body mx-2 my-4">
    <div class="world-globe"></div>
    <%= form_with(model: @trip) do |f| %>
      <div class="my-3">
        <%= f.label :name, "トリップ名", class:"mb-1"%>
        <%= f.text_field :name, autofocus: true,  class:"form-control" %>
      </div>
      <div class="mb-3">
        <%= f.label :description, "詳細・メモ", class:"mb-1"%>
        <%= f.text_field :description, class:"form-control" %>
      </div>
      <div class="mb-3">
        <%= f.label :date_range, "旅行の日数・期間", class:"mb-1" %>
        <%= f.text_field :date_range, id:"date-range-picker", class:"form-control"%>
      </div>
      <div class="mb-3">
        <%= f.hidden_field :start_day, value: Date.today, class:"start_hidden" %>
        <%= f.hidden_field :end_day, value: Date.today, class:"end_hidden" %>
      </div>

      <div class="continent-area mb-1">
        <%= f.label :continent_id, "旅行先", class:"mb-1"%>
        <%= f.collection_select :continent_id,
            Continent.order(:name), :id, :name, {prompt: "方面を選択してください"}, {class: "form-control"} %>
      </div>

      <div class="country-area mb-1" style="display:none;">
        <%= render partial: 'locations/to_country',
            locals: { f: f, countries: @countries} %>
      </div>

      <div class="state-area mb-1" style="display:none;">
        <%= render partial: 'locations/to_state',
            locals: { f: f, states: @states} %>
      </div>

      <div class="city-area mb-1" style="display:none;">
        <%= render partial: 'locations/to_city',
            locals: { f: f, cities: @cities} %>
      </div>

      <div class="custom-control custom-checkbox my-4">
        <%= f.check_box :privacy, as: :boolean, class:"custom-control-input"%>
        <%= f.label :privacy, "旅行のスケジュールをを公開しません", class:"custom-control-label" %>
      </div>

      <div class="text-center">
        <%= f.submit "作成する", class: "btn btn-primary"%>
        <%= link_to 'Back', user_path(current_user), class: "ml-3 btn btn-outline-primary" %>
      </div>
    <% end %>
  </div>
</div>

  <script>
  // Themes begin
    am4core.useTheme(am4themes_animated);
    // Themes end

    // Create map instance
    var chart = am4core.create("chartdiv", am4maps.MapChart);
    chart.geodata = am4geodata_worldLow;
    chart.projection = new am4maps.projections.Miller();
    chart.homeZoomLevel = 1;
    chart.homeGeoPoint = {
      latitude: gon.home_lat,
      longitude: gon.home_lng
    };

    // Create map polygon series (setting color of nackground map)
    var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());
    polygonSeries.useGeodata = true;
    polygonSeries.mapPolygons.template.fill = chart.colors.getIndex(0).lighten(0.5);
    polygonSeries.mapPolygons.template.nonScalingStroke = true;
    polygonSeries.exclude = ["AQ"];

    // Add line bullets
    var cities = chart.series.push(new am4maps.MapImageSeries());
    cities.mapImages.template.nonScaling = true;

    var city = cities.mapImages.template.createChild(am4core.Circle);
    city.radius = 6;
    city.fill = chart.colors.getIndex(0).brighten(-0.2);
    city.strokeWidth = 2;
    city.stroke = am4core.color("#fff");

    function addCity(coords, title) {
      var city = cities.mapImages.create();
      city.latitude = coords.latitude;
      city.longitude = coords.longitude;
      city.tooltipText = title;
      return city;
    }

    var home = addCity({ "latitude": gon.home_lat, "longitude": gon.home_lng }, gon.home_name);
    var destination = addCity({ "latitude": gon.des_lat, "longitude": gon.des_lng }, gon.des_name);

    // Add lines
    // Curved Lines from A to B
    var lineSeries = chart.series.push(new am4maps.MapArcSeries());
    lineSeries.mapLines.template.line.strokeWidth = 2;
    lineSeries.mapLines.template.line.strokeOpacity = 0.5;
    lineSeries.mapLines.template.line.stroke = city.fill;
    lineSeries.mapLines.template.line.nonScalingStroke = true;
    lineSeries.mapLines.template.line.strokeDasharray = "1,1";
    lineSeries.zIndex = 10;

    // Lines for airplanes shadows
    var shadowLineSeries = chart.series.push(new am4maps.MapLineSeries());
    shadowLineSeries.mapLines.template.line.strokeOpacity = 0;
    shadowLineSeries.mapLines.template.line.nonScalingStroke = true;
    shadowLineSeries.mapLines.template.shortestDistance = false;
    shadowLineSeries.zIndex = 5;

    // setting line from A to B
    function addLine(from, to) {
      var line = lineSeries.mapLines.create();
      line.imagesToConnect = [from, to];
      line.line.controlPointDistance = -0.3;

      var shadowLine = shadowLineSeries.mapLines.create();
      shadowLine.imagesToConnect = [from, to];

      return line;
    }

    // plotting points for lines
    addLine(home, destination);

    // Add plane
    var plane = lineSeries.mapLines.getIndex(0).lineObjects.create();
    plane.position = 0;
    plane.width = 48;
    plane.height = 48;

    plane.adapter.add("scale", function (scale, target) {
      return 0.5 * (1 - (Math.abs(0.5 - target.position)));
    })

    var planeImage = plane.createChild(am4core.Sprite);
    planeImage.scale = 0.08;
    planeImage.horizontalCenter = "middle";
    planeImage.verticalCenter = "middle";
    planeImage.path = "m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47";
    planeImage.fill = chart.colors.getIndex(2).brighten(-0.2);
    planeImage.strokeOpacity = 0;

    var shadowPlane = shadowLineSeries.mapLines.getIndex(0).lineObjects.create();
    shadowPlane.position = 0;
    shadowPlane.width = 48;
    shadowPlane.height = 48;

    var shadowPlaneImage = shadowPlane.createChild(am4core.Sprite);
    shadowPlaneImage.scale = 0.05;
    shadowPlaneImage.horizontalCenter = "middle";
    shadowPlaneImage.verticalCenter = "middle";
    shadowPlaneImage.path = "m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47";
    shadowPlaneImage.fill = am4core.color("#000");
    shadowPlaneImage.strokeOpacity = 0;

    shadowPlane.adapter.add("scale", function (scale, target) {
      target.opacity = (0.6 - (Math.abs(0.5 - target.position)));
      return 0.5 - 0.3 * (1 - (Math.abs(0.5 - target.position)));
    })

    // Plane animation
    var currentLine = 0;
    var direction = 1;
    function flyPlane() {

      // Get current line to attach plane to
      plane.mapLine = lineSeries.mapLines.getIndex(currentLine);
      plane.parent = lineSeries;
      shadowPlane.mapLine = shadowLineSeries.mapLines.getIndex(currentLine);
      shadowPlane.parent = shadowLineSeries;
      shadowPlaneImage.rotation = planeImage.rotation;

      // Set up animation
      var from, to;
      var numLines = lineSeries.mapLines.length;
      if (direction == 1) {
        from = 0
        to = 1;
        if (planeImage.rotation != 0) {
          planeImage.animate({ to: 0, property: "rotation" }, 1000).events.on("animationended", flyPlane);
          return;
        }
      }
      return flight
      else {
        from = 1;
        to = 0;
        if (planeImage.rotation != 180) {
          planeImage.animate({ to: 180, property: "rotation" }, 1000).events.on("animationended", flyPlane);
          return;
        }
      }

      // Start the animation
      var animation = plane.animate({
        from: from,
        to: to,
        property: "position"
      }, 5000, am4core.ease.sinInOut);
      animation.events.on("animationended", flyPlane)
      /*animation.events.on("animationprogress", function(ev) {
        var progress = Math.abs(ev.progress - 0.5);
        //console.log(progress);
        //planeImage.scale += 0.2;
      });*/

      shadowPlane.animate({
        from: from,
        to: to,
        property: "position"
      }, 5000, am4core.ease.sinInOut);

      // Increment line, or reverse the direction
      currentLine += direction;
      if (currentLine < 0) {
        currentLine = 0;
        direction = 1;
      }
      else if ((currentLine + 1) > numLines) {
        currentLine = numLines - 1;
        direction = -1;
      }

    }

    flyPlane();
  </script>

  <script src="https://www.amcharts.com/lib/4/core.js"></script>
  <script src="https://www.amcharts.com/lib/4/maps.js"></script>
  <script src="https://www.amcharts.com/lib/4/geodata/worldLow.js"></script>
  <script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>